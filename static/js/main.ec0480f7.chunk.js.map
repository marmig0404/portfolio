{"version":3,"sources":["components/logo.svg","components/Landing.js","components/About.js","components/Experience.js","components/Portfolio.js","components/Contact.js","components/ExpandableBox.js","components/ExpandableList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Landing","className","src","logo","alt","Component","About","Experience","Portfolio","Contact","ExpandableBox","props","state","contentVisibility","headerText","this","content","console","log","onClick","setState","onKeyPress","role","tabIndex","CSSTransition","in","classNames","mountOnEnter","unmountOnExit","ExpandableList","contentList","map","item","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,kC,oRCItBC,E,iLAEjB,OACE,yBAAKC,UAAU,WACb,4BAAQA,UAAU,kBAChB,yBAAKC,IAAKC,IAAMF,UAAU,eAAeG,IAAI,SAC7C,kDACA,uBAAGH,UAAU,sBAAb,iB,GAP2BI,aCDhBC,G,sLAEjB,OAAO,yBAAKL,UAAU,eAAf,iB,GAFwBI,cCAdE,E,iLAEjB,OAAO,yBAAKN,UAAU,eAAf,sB,GAF6BI,aCAnBG,E,iLAEjB,OAAO,yBAAKP,UAAU,eAAf,qB,GAF4BI,aCAlBI,E,iLAEjB,OAAO,yBAAKR,UAAU,eAAf,mB,GAF0BI,a,gBCChBK,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,mBAAmB,GAHJ,E,sEAOT,IAAD,OACDC,EAAaC,KAAKJ,MAAMG,WACxBE,EAAUD,KAAKJ,MAAMK,QAE3B,OADAC,QAAQC,IAAIH,KAAKH,MAAMC,mBAErB,yBAAKZ,UAAU,eACb,4BACEA,UAAU,SACVkB,QAAS,WACP,EAAKC,SAAS,CAAEP,mBAAoB,EAAKD,MAAMC,qBAEjDQ,WAAY,WACV,EAAKD,SAAS,CAAEP,mBAAoB,EAAKD,MAAMC,qBAEjDS,KAAK,SACLC,SAAU,GAETT,GAGH,kBAACU,EAAA,EAAD,CACEC,GAAIV,KAAKH,MAAMC,kBACfa,WAAW,kBACXC,cAAc,EACdC,eAAe,GAEdZ,Q,GAlCgCX,cCAtBwB,E,YACnB,WAAYlB,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,GAFI,E,sEAMjB,IAAMkB,EAAcf,KAAKJ,MAAMmB,YAC/B,OACE,yBAAK7B,UAAU,WACZ6B,EAAYC,KAAI,SAAAC,GAAI,OACnB,kBAAC,EAAD,CAAeC,IAAKD,EAAKlB,WAAYA,WAAYkB,EAAKlB,WAAYE,QAASgB,EAAKhB,kB,GAX9CX,aCsB7B6B,MAhBf,WACE,OACE,yBAAKjC,UAAU,eACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACE6B,YAAa,CACX,CAAEhB,WAAY,QAASE,QAAS,kBAAC,EAAD,OAChC,CAAEF,WAAY,aAAcE,QAAS,kBAAC,EAAD,OACrC,CAAEF,WAAY,YAAaE,QAAS,kBAAC,EAAD,OACpC,CAAEF,WAAY,UAAWE,QAAS,kBAAC,EAAD,YCPxBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,CAAKxC,UAAU,QAAUyC,SAASC,eAAe,SD2H3D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ec0480f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.09bbc8b8.svg\";","import React, { Component } from \"react\";\r\nimport \"./Landing.css\";\r\nimport logo from \"./logo.svg\";\r\n\r\nexport default class Landing extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Landing\">\r\n        <header className=\"Landing-header\">\r\n          <img src={logo} className=\"Landing-logo\" alt=\"logo\" />\r\n          <h1>Welcome to my page</h1>\r\n          <p className=\"Landing-Signiature\">-Martin</p>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./Tab.css\";\r\n\r\nexport default class About extends Component {\r\n  render() {\r\n    return <div className=\"tab-wrapper\">About tab</div>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./Tab.css\";\r\n\r\nexport default class Experience extends Component {\r\n  render() {\r\n    return <div className=\"tab-wrapper\">Experience tab</div>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./Tab.css\";\r\n\r\nexport default class Portfolio extends Component {\r\n  render() {\r\n    return <div className=\"tab-wrapper\">Portfolio tab</div>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./Tab.css\";\r\n\r\nexport default class Contact extends Component {\r\n  render() {\r\n    return <div className=\"tab-wrapper\">Contact tab</div>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport \"./ExpandableBox.css\";\r\n\r\nexport default class ExpandableBox extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      contentVisibility: false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const headerText = this.props.headerText;\r\n    const content = this.props.content;\r\n    console.log(this.state.contentVisibility);\r\n    return (\r\n      <div className=\"box-wrapper\">\r\n        <header\r\n          className=\"header\"\r\n          onClick={() => {\r\n            this.setState({ contentVisibility: !this.state.contentVisibility });\r\n          }}\r\n          onKeyPress={() => {\r\n            this.setState({ contentVisibility: !this.state.contentVisibility });\r\n          }}\r\n          role=\"button\"\r\n          tabIndex={0}\r\n        >\r\n          {headerText}\r\n        </header>\r\n\r\n        <CSSTransition\r\n          in={this.state.contentVisibility}\r\n          classNames=\"content-wrapper\"\r\n          mountOnEnter={true}\r\n          unmountOnExit={true}\r\n        >\r\n          {content}\r\n        </CSSTransition>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./ExpandableList.css\";\r\nimport ExpandableBox from \"./ExpandableBox\";\r\n\r\nexport default class ExpandableList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = \"\";\r\n  }\r\n\r\n  render() {\r\n    const contentList = this.props.contentList;\r\n    return (\r\n      <div className=\"wrapper\">\r\n        {contentList.map(item => (\r\n          <ExpandableBox key={item.headerText} headerText={item.headerText} content={item.content} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Landing from \"./components/Landing\";\r\nimport About from \"./components/About\";\r\nimport Experience from \"./components/Experience\";\r\nimport Portfolio from \"./components/Portfolio\";\r\nimport Contact from \"./components/Contact\";\r\n//import { useScrollPosition } from \"./components/useScrollPosition\";\r\nimport ExpandableList from \"./components/ExpandableList\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app-wrapper\">\r\n      <Landing />\r\n      <ExpandableList\r\n        contentList={[\r\n          { headerText: \"About\", content: <About /> },\r\n          { headerText: \"Experience\", content: <Experience /> },\r\n          { headerText: \"Portfolio\", content: <Portfolio /> },\r\n          { headerText: \"Contact\", content: <Contact /> }\r\n        ]}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App className=\"app\" />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}